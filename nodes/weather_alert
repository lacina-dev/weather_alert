#!/usr/bin/env python
"""
Weather alert node, publishing current rain status base on RainViewer API.
"""
import time
from types import FrameType
from typing import Optional
import sys
import signal
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
import cv2
from cv_bridge import CvBridge
from weather_alert.rainviewer import RainViewer
from weather_alert.msg import RainAlert


class Node:
    """
    ROS node for weather alert. Publishing rain status messages.
    """
    def __init__(self):
        self.pub_alert = rospy.Publisher('rain_alert', RainAlert, queue_size=10, latch=True)
        self.nex_log_info_pub = rospy.Publisher('log_info', String, queue_size=10)
        self.pub_forecast_img = rospy.Publisher('forecast_img', Image, queue_size=10, latch=True)
        self.pub_map_img = rospy.Publisher('map_img', Image, queue_size=10, latch=True)
        self.bridge = CvBridge()
        self.lat = None
        self.lon = None
        self.default_location = None
        self.radar_config = None
        self.use_map = None
        self.namespace = rospy.get_namespace()
        self.load_params()
        self.rain_viewer = RainViewer(self.lat, self.lon, self.radar_config, self.use_map)
        self.rain_viewer.process_data()
        self.publish_data()

    def load_params(self):
        """
        Load config from rosparams.

        :return: none
        """
        config = rospy.get_param(f'{self.namespace}')
        self.default_location = config['general']['default_location']
        self.lat = float(config[self.default_location]['lat'])
        self.lon = float(config[self.default_location]['lon'])
        self.radar_config = dict(config['radar'])
        self.use_map = int(config['general']['use_map'])

    def publish_data(self):
        """
        Publish rain status.

        :return: none
        """
        img_map, img_forecast, rain_alert, rain_now, rain_data = self.rain_viewer.evaluate_data()
        msg = RainAlert()
        msg.time = rospy.Time.now()
        msg.rain_alert = rain_alert
        msg.rain_now = rain_now
        msg.location = self.default_location
        msg.lat = self.lat
        msg.lon = self.lon
        msg.status_past60m = rain_data['observations'][-10]['final_status']
        msg.status_past50m = rain_data['observations'][-9]['final_status']
        msg.status_past40m = rain_data['observations'][-8]['final_status']
        msg.status_past30m = rain_data['observations'][-7]['final_status']
        msg.status_past20m = rain_data['observations'][-6]['final_status']
        msg.status_past10m = rain_data['observations'][-5]['final_status']
        msg.status_now = rain_data['observations'][-4]['final_status']
        msg.status_nowcast10m = rain_data['observations'][-3]['final_status']
        msg.status_nowcast20m = rain_data['observations'][-2]['final_status']
        msg.status_nowcast30m = rain_data['observations'][-1]['final_status']
        self.pub_alert.publish(msg)
        
        # Convert OpenCV image to ROS Image message and publish
        img_forecast = cv2.cvtColor(img_forecast, cv2.COLOR_BGR2RGB) 
        img_msg = self.bridge.cv2_to_imgmsg(img_forecast, encoding="rgb8")
        self.pub_forecast_img.publish(img_msg)

        img_map = cv2.cvtColor(img_map, cv2.COLOR_BGRA2RGBA) 
        img_map_msg = self.bridge.cv2_to_imgmsg(img_map, encoding="rgba8")  # Changed from bgr8 to bgra8 for 8UC4 format
        self.pub_map_img.publish(img_map_msg)
        
        for observation in rain_data['observations'][-10:]:

            rospy.loginfo(f"<{rospy.get_caller_id()}> Time: {observation['time']} "
                          f"Type: {observation['type']}  Status: {observation['final_status']} "
                          f"[{observation['percent_warn']:6.2f}% warn] "
                          f"[{observation['percent_alert']:6.2f}% alert] "
                          f"[{observation['percent_rain']:6.2f}% rain]")
        if rain_alert:
            rospy.logwarn('Rain alert!')
            self.nex_log_info_pub.publish("Rain alert!")
        if rain_now > 0:
            rospy.logwarn(f"Rain now {int(rain_data['observations'][-4]['percent_rain'])}%")
            self.nex_log_info_pub.publish(
                f"Rain now {int(rain_data['observations'][-4]['percent_rain'])}%.")

    def check_for_new_data(self):
        """
        Check for new data from RainViewer API.

        :return: none
        """
        result = self.rain_viewer.update_data()

        if result:
            rospy.loginfo(f"<{rospy.get_caller_id()}> New map list received.")
            self.rain_viewer.process_data()
            # self.rain_viewer.print_rain_status()
            self.publish_data()


if __name__ == '__main__':
    try:
        rospy.init_node('weather_alert_node')
        rospy.loginfo(f"<{rospy.get_caller_id()}> Initialising...")
        node = Node()
        r = rospy.Rate(0.2)  # Hz

        def signal_handler(signal_num: int, frame: Optional[FrameType]) -> None:
            """
            Handles the SIGINT signal (Ctrl+C) by shutting down
            the ROS node and exiting the program.

            :param signal_num: The signal number
            :param frame: The current stack frame
            :return: None
            """
            signal_name = signal.Signals(signal_num).name
            rospy.loginfo(f"<{rospy.get_caller_id()}> Received signal {signal_num} ({signal_name})")
            rospy.loginfo(f"<{rospy.get_caller_id()}> Shutting down weather alert node.")
            rospy.signal_shutdown("end")
            time.sleep(1)  # wait for a second to ensure all log messages are written
            sys.exit(0)
        signal.signal(signal.SIGINT, signal_handler)

        while not rospy.is_shutdown():
            node.check_for_new_data()
            r.sleep()

    except rospy.ROSInterruptException:
        rospy.logerr(f"<{rospy.get_caller_id()}> error.")
